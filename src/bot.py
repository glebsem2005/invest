import html
import logging
import re
import traceback
import json
import os
import smtplib
from abc import ABC, abstractmethod
from typing import Any, Dict, Tuple
from docx import Document
from docx.shared import Inches
import tempfile
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

import aiogram.utils.exceptions
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from access_middleware import AccessMiddleware
from chat_context import ChatContextManager
from config import Config
from file_processor import FileProcessor
from keyboards_builder import Button, DynamicKeyboard, Keyboard
from logger import Logger
from models_api import ExcelFileManager, ExcelSearchStrategy, ModelAPI
from prompts import DEFAULT_PROMPTS_DIR, Models, SystemPrompt, SystemPrompts, Topics
from sql_auth import init_auth_system, check_user_authorized, get_user_email

Logger()
logger = logging.getLogger('bot')
config = Config()

# =============================================================================
# –°–û–°–¢–û–Ø–ù–ò–Ø
# =============================================================================

class UserStates(StatesGroup):
    ACCESS = State()
    CHOOSING_TOPIC = State()
    CHOOSING_MODEL = State()
    ENTERING_PROMPT = State()
    ATTACHING_FILE = State()
    UPLOADING_FILE = State()
    ASKING_CONTINUE = State()
    CONTINUE_DIALOG = State()
    ATTACHING_FILE_CONTINUE = State()
    UPLOADING_FILE_CONTINUE = State()
    
    # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    INVESTMENT_ACTIONS = State()
    INVESTMENT_QA = State()
    INVESTMENT_REPORT_OPTIONS = State()
    CHOOSING_FINAL_ACTION = State()

class AdminStates(StatesGroup):
    CHOOSING_PROMPT = State()
    CHOOSING_PROMPT_TYPE = State()
    UPLOADING_SYSTEM_PROMPT = State()
    UPLOADING_DETAIL_PROMPT = State()
    UPLOADING_PROMPT = State()
    NEW_PROMPT_NAME = State()
    NEW_PROMPT_DISPLAY = State()
    NEW_PROMPT_UPLOAD = State()
    NEW_PROMPT_UPLOAD_DETAIL = State()
    UPLOADING_SCOUTING_FILE = State()
    CHOOSING_AI_MODEL = State()

# =============================================================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# =============================================================================

class TopicKeyboard(DynamicKeyboard):
    @classmethod
    def get_buttons(cls) -> Tuple[Button, ...]:
        buttons = []
        for topic_name, topic in Topics.__members__.items():
            buttons.append(Button(text=topic.value, callback=f'topic_{topic_name}'))
        return tuple(buttons)

class FileAttachKeyboard(DynamicKeyboard):
    @classmethod
    def get_buttons(cls) -> Tuple[Button, ...]:
        return (
            Button(text='–î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª', callback='attach_file'),
            Button(text='–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞', callback='no_file'),
        )

class ContinueKeyboard(Keyboard):
    _buttons = (
        Button('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'continue_yes'),
        Button('–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', 'continue_no'),
    )

class UnauthorizedKeyboard(Keyboard):
    _buttons = (Button('üîê –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é', 'go_to_main_bot'),)
    
    @classmethod
    def get_markup(cls):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(
            text="üîê –ü—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
            url="https://t.me/sberallaibot"
        ))
        return markup

class InvestmentActionsKeyboard(Keyboard):
    _buttons = (
        Button('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è', 'investment_regenerate'),
        Button('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'investment_ask_question'),
        Button('–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç', 'investment_get_report'),
    )

class InvestmentReportKeyboard(Keyboard):
    _buttons = (
        Button('–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç', 'investment_download'),
        Button('–í—ã—Å–ª–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É', 'investment_email'),
        Button('‚Üê –ù–∞–∑–∞–¥', 'investment_back_to_actions'),
    )

class FinalActionsKeyboard(Keyboard):
    _buttons = (
        Button('üè¢ –ù–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è', 'new_company_analysis'),
        Button('‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É', 'return_to_main_bot'),
    )

class AdminPromptKeyboard(DynamicKeyboard):
    @classmethod
    def get_buttons(cls) -> Tuple[Button, ...]:
        buttons = []
        for topic_name, topic in Topics.__members__.items():
            buttons.append(Button(text=topic.value, callback=f'prompt_{topic_name}'))
        return tuple(buttons)

class PromptTypeKeyboard(Keyboard):
    _buttons = (
        Button('–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç', 'prompt_type_system'),
        Button('–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç', 'prompt_type_detail'),
        Button('–û–±–∞ –ø—Ä–æ–º–ø—Ç–∞', 'prompt_type_both'),
    )

class AdminAIModelKeyboard(DynamicKeyboard):
    @classmethod
    def get_buttons(cls) -> Tuple[Button, ...]:
        buttons = []
        for model_name, model in Models.__members__.items():
            buttons.append(Button(text=f"–ú–æ–¥–µ–ª—å: {model_name.upper()}", callback=f'ai_model_{model_name}'))
        return tuple(buttons)

# =============================================================================
# EMAIL SENDER
# =============================================================================

class EmailSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –æ—Ç—á–µ—Ç–∞–º–∏."""
    
    def __init__(self):
        self.smtp_server = config.SMTP_SERVER
        self.smtp_port = config.SMTP_PORT  
        self.email_user = config.EMAIL_USER
        self.email_password = config.EMAIL_PASSWORD
        self.sender_name = config.SENDER_NAME
        
        if not self.email_user or not self.email_password:
            logger.warning("Email credentials not configured. Email sending will not work.")
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        if not filename or not filename.strip():
            return 'unknown_company'
        
        sanitized = re.sub(r'[<>:"/\\|?*\x00-\x1f]', '_', str(filename))
        sanitized = sanitized.strip().replace(' ', '_')
        
        if len(sanitized) > 50:
            sanitized = sanitized[:50]
        sanitized = sanitized.rstrip('.')
        
        if not sanitized:
            return 'unknown_company'
        
        return sanitized

    async def send_report(self, recipient_email: str, company_name: str, report_file_path: str, filename: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email."""
        if not self.email_user or not self.email_password:
            logger.error("Email credentials not configured")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = f"{self.sender_name} <{self.email_user}>"
            msg['To'] = recipient_email
            msg['Subject'] = f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {company_name}"
        
            body = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í—ã—Å—ã–ª–∞–µ–º –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏ "{company_name}".

–û—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
- –û—Ü–µ–Ω–∫—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤"""
        
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
            if os.path.exists(report_file_path):
                with open(report_file_path, "rb") as attachment:
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(attachment.read())
                    encoders.encode_base64(part)
            
                safe_filename = filename if filename else f"investment_analysis_{self._sanitize_filename(company_name)}.docx"
                if not safe_filename:
                    safe_filename = "investment_analysis_report.docx"
            
                part.add_header('Content-Disposition', f'attachment; filename="{safe_filename}"')
                msg.attach(part)
                logger.info(f"Attached file with name: {safe_filename}")
            else:
                logger.error(f"Report file not found: {report_file_path}")
                return False
        
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.email_user, self.email_password)
            text = msg.as_string()
            server.sendmail(self.email_user, recipient_email, text)
            server.quit()
        
            logger.info(f"Email successfully sent to {recipient_email}")
            return True
        
        except Exception as e:
            logger.error(f"Failed to send email to {recipient_email}: {e}")
            return False

# =============================================================================
# INVESTMENT ANALYSIS PROCESSOR
# =============================================================================

class InvestmentAnalysisProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self):
        self.analysis_prompt = """
–ù–∞–π–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞.

–ì–õ–ê–í–ù–ê–Ø –ó–ê–î–ê–ß–ê: —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.

–¢–µ–∫—Å—Ç: "{user_text}"

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –ù–∞–π–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –±—Ä–µ–Ω–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ
2. –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ("—Ñ—É–¥—Ç–µ—Ö —Å—Ç–∞—Ä—Ç–∞–ø"), –Ω–∞–ø–∏—à–∏ "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è_–∫–æ–º–ø–∞–Ω–∏—è"
3. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:
   - market: 1 –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ä—ã–Ω–æ–∫, —Ñ–∏–Ω–∞–Ω—Å—ã, –ø–æ–∑–∏—Ü–∏—è)
   - rivals: 1 –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
   - synergy: 1 –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω–µ—Ä–≥–∏–∏
   - –ï—Å–ª–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—Ç–∞–≤—å –≤—Å–µ –≤ 1

–û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ JSON: {{"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "market": 1, "rivals": 1, "synergy": 1}}
"""
        
        self.executive_summary_prompt = """
1. –†–û–õ–¨

‚Ä¢ –¢—ã ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å 50-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ M&A, —Å –≥–ª—É–±–æ–∫–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è Big Tech (Apple, Amazon, Yandex, Baidu, Tencent –∏ –ø—Ä.) –∏ –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–æ–±–µ–ª–µ–≤—Å–∫–∏—Ö –ª–∞—É—Ä–µ–∞—Ç–æ–≤ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ.
‚Ä¢ –í —Ç–≤–æ–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –°–±–µ—Ä–∞ —á–µ—Ä–µ–∑ M&A –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞.

2. –ó–ê–î–ê–ß–ê –ò –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –°–±–µ—Ä–∞ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π [–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏]. 

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ executive summary –¥–ª—è –≤—ã—Å—à–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –±–∞–Ω–∫–∞ ‚Äì –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ–±—ä–µ–º–æ–º –Ω–µ –±–æ–ª–µ–µ 250 —Å–ª–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤. –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –¥–µ–Ω–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π.

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–µ.
"""

    def _get_ai_model(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å AI –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            system_prompts = SystemPrompts()
            ai_model_config = system_prompts.get_prompt_if_exists('AI_MODEL_CONFIG')
            if ai_model_config:
                model_name = ai_model_config.strip().lower()
                if hasattr(Models, model_name):
                    return Models[model_name].value()
            return Models.chatgpt.value()
        except:
            return Models.chatgpt.value()

    async def parse_user_request(self, user_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            model_api = ModelAPI(Models.chatgpt.value())
            messages = [
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."},
                {"role": "user", "content": self.analysis_prompt.format(user_text=user_text)}
            ]
            
            response = await model_api.get_response(messages)
            logger.info(f"Raw response from GPT: '{response}'")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
            try:
                result = json.loads(response.strip())
                if "name" in result and result["name"].strip():
                    return {
                        "name": result.get("name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è_–∫–æ–º–ø–∞–Ω–∏—è"),
                        "market": result.get("market", 1),
                        "rivals": result.get("rivals", 1), 
                        "synergy": result.get("synergy", 1)
                    }
            except json.JSONDecodeError:
                pass
            
        except Exception as e:
            logger.error(f"Error parsing user request: {e}")
        
        # Fallback
        fallback_result = {"name": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è_–∫–æ–º–ø–∞–Ω–∏—è", "market": 1, "rivals": 1, "synergy": 1}
        logger.info(f"Using fallback result: {fallback_result}")
        return fallback_result

    async def run_analysis(self, analysis_params: Dict[str, Any], file_content: str = "") -> Dict[str, str]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º."""
        results = {}
        system_prompts = SystemPrompts()
        model_api = ModelAPI(self._get_ai_model())
        company_name = analysis_params.get("name", "unknown_company")
        
        additional_context = f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞:\n{file_content}" if file_content else ""
        analysis_context = ""
        
        # –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if analysis_params.get("market", 0):
            try:
                market_prompt_raw = system_prompts.get_prompt(SystemPrompt.INVESTMENT_MARKET)
                parsed_prompt = self._parse_classical_prompt(market_prompt_raw)
                
                system_content = parsed_prompt["role"] + "\n\n–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –°–¢–†–û–ì–û –ù–ï –ë–û–õ–ï–ï 300 –°–õ–û–í."
                user_content = parsed_prompt["prompt"].replace("[–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏]", company_name) + additional_context
                
                messages = [
                    {"role": "system", "content": system_content},
                    {"role": "user", "content": user_content}
                ]
                
                results["market"] = await model_api.get_response(messages)
                analysis_context += f"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}:\n{results['market']}"
                logger.info("Market analysis completed")
            except Exception as e:
                logger.error(f"Error in market analysis: {e}")
                results["market"] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {str(e)}"
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        if analysis_params.get("rivals", 0):
            try:
                rivals_prompt_raw = system_prompts.get_prompt(SystemPrompt.INVESTMENT_RIVALS)
                parsed_prompt = self._parse_classical_prompt(rivals_prompt_raw)
                
                system_content = parsed_prompt["role"] + "\n\n–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –°–¢–†–û–ì–û –ù–ï –ë–û–õ–ï–ï 300 –°–õ–û–í."
                user_content = parsed_prompt["prompt"].replace("[–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏]", company_name) + additional_context + analysis_context
                
                messages = [
                    {"role": "system", "content": system_content},
                    {"role": "user", "content": user_content}
                ]
                
                results["rivals"] = await model_api.get_response(messages)
                analysis_context += f"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}:\n{results['rivals']}"
                logger.info("Rivals analysis completed")
            except Exception as e:
                logger.error(f"Error in rivals analysis: {e}")
                results["rivals"] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {str(e)}"
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω–µ—Ä–≥–∏–∏
        if analysis_params.get("synergy", 0):
            try:
                synergy_prompt_raw = system_prompts.get_prompt(SystemPrompt.INVESTMENT_SYNERGY)
                
                if isinstance(synergy_prompt_raw, dict):
                    system_content = synergy_prompt_raw.get("role", "") + "\n\n–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –°–¢–†–û–ì–û –ù–ï –ë–û–õ–ï–ï 300 –°–õ–û–í."
                    user_content = synergy_prompt_raw.get("prompt", "").replace("[–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏]", company_name) + additional_context + analysis_context
                else:
                    parsed_prompt = self._parse_classical_prompt(synergy_prompt_raw)
                    system_content = parsed_prompt["role"] + "\n\n–û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –°–¢–†–û–ì–û –ù–ï –ë–û–õ–ï–ï 300 –°–õ–û–í."
                    user_content = parsed_prompt["prompt"].replace("[–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏]", company_name) + additional_context + analysis_context
                
                messages = [
                    {"role": "system", "content": system_content},
                    {"role": "user", "content": user_content}
                ]
                
                results["synergy"] = await model_api.get_response(messages)
                logger.info("Synergy analysis completed")
            except Exception as e:
                logger.error(f"Error in synergy analysis: {e}")
                results["synergy"] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏–Ω–µ—Ä–≥–∏–∏: {str(e)}"
        
        return results
    
    def _parse_classical_prompt(self, prompt_text: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Ñ–æ—Ä–º–∞—Ç–∞ '–†–û–õ–¨. ... –ö–û–ù–¢–ï–ö–°–¢. ...'"""
        try:
            role_match = re.search(r'–†–û–õ–¨\.\s*(.*?)(?=\n\s*–ö–û–ù–¢–ï–ö–°–¢\.|\n\s*[–ê-–Ø–Å]+\.|\Z)', prompt_text, re.DOTALL | re.IGNORECASE)
            context_match = re.search(r'–ö–û–ù–¢–ï–ö–°–¢\.\s*(.*?)(?=\n\s*[–ê-–Ø–Å]+\.|\Z)', prompt_text, re.DOTALL | re.IGNORECASE)
            
            role = role_match.group(1).strip() if role_match else "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫."
            context = context_match.group(1).strip() if context_match else prompt_text.strip()
            
            return {"role": role, "prompt": context}
        except Exception as e:
            logger.warning(f"Error parsing classical prompt: {e}")
            return {"role": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.", "prompt": prompt_text}

    def create_docx_report(self, company_name: str, analysis_results: Dict[str, str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç DOCX –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            doc = Document()
            doc.add_heading(f'–ê–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {company_name}', 0)
            
            if "market" in analysis_results:
                doc.add_heading('–†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑', level=1)
                doc.add_paragraph(analysis_results["market"])
                doc.add_page_break()
            
            if "rivals" in analysis_results:
                doc.add_heading('–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', level=1)
                doc.add_paragraph(analysis_results["rivals"])
                doc.add_page_break()
            
            if "synergy" in analysis_results:
                doc.add_heading('–ê–Ω–∞–ª–∏–∑ —Å–∏–Ω–µ—Ä–≥–∏–∏', level=1)
                doc.add_paragraph(analysis_results["synergy"])
            
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.docx')
            doc.save(temp_file.name)
            temp_file.close()
            
            logger.info(f"DOCX report created: {temp_file.name}")
            return temp_file.name
            
        except Exception as e:
            logger.error(f"Error creating DOCX report: {e}")
            raise

    async def generate_executive_summary(self, docx_file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç executive summary –Ω–∞ –æ—Å–Ω–æ–≤–µ DOCX —Ñ–∞–π–ª–∞."""
        try:
            doc = Document(docx_file_path)
            doc_content = "\n".join([paragraph.text for paragraph in doc.paragraphs])
            
            model_api = ModelAPI(Models.chatgpt.value())
            messages = [
                {"role": "system", "content": self.executive_summary_prompt},
                {"role": "user", "content": f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–Ω–∞–ª–∏–∑–∞:\n\n{doc_content}"}
            ]
            
            executive_summary = await model_api.get_response(messages)
            logger.info("Executive summary generated")
            return executive_summary
            
        except Exception as e:
            logger.error(f"Error generating executive summary: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ executive summary"

    async def create_final_report_with_qa(self, company_name: str, analysis_results: Dict[str, str], qa_history: list) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ Q&A."""
        try:
            doc = Document()
            
            title = doc.add_heading(f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {company_name}', 0)
            title.alignment = 1
        
            from datetime import datetime
            date_paragraph = doc.add_paragraph(f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime("%d.%m.%Y")}')
            date_paragraph.alignment = 1
            doc.add_page_break()
        
            if "market" in analysis_results:
                doc.add_heading('1. –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑', level=1)
                doc.add_paragraph(analysis_results["market"])
                doc.add_page_break()
        
            if "rivals" in analysis_results:
                doc.add_heading('2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', level=1)
                doc.add_paragraph(analysis_results["rivals"])
                doc.add_page_break()
        
            if "synergy" in analysis_results:
                doc.add_heading('3. –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω–µ—Ä–≥–∏–∏', level=1)
                doc.add_paragraph(analysis_results["synergy"])
                if qa_history:
                    doc.add_page_break()
        
            if qa_history:
                doc.add_heading('4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã', level=1)
                for i, qa in enumerate(qa_history, 1):
                    question_para = doc.add_paragraph()
                    question_run = question_para.add_run(f"–í–æ–ø—Ä–æ—Å {i}: ")
                    question_run.bold = True
                    question_para.add_run(qa['question'])
                
                    answer_para = doc.add_paragraph()
                    answer_run = answer_para.add_run("–û—Ç–≤–µ—Ç: ")
                    answer_run.bold = True
                    answer_para.add_run(qa['answer'])
                    
                    if i < len(qa_history):
                        doc.add_paragraph()
        
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='_final.docx')
            doc.save(temp_file.name)
            temp_file.close()
        
            logger.info(f"Final report with Q&A created: {temp_file.name}")
            return temp_file.name
        
        except Exception as e:
            logger.error(f"Error creating final report with Q&A: {e}")
            return self.create_docx_report(company_name, analysis_results)

    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        if not filename or not filename.strip():
            return 'unknown_company'
        
        sanitized = re.sub(r'[<>:"/\\|?*\x00-\x1f]', '_', str(filename))
        sanitized = sanitized.strip().replace(' ', '_')
        
        if len(sanitized) > 50:
            sanitized = sanitized[:50]
        sanitized = sanitized.rstrip('.')
        
        return sanitized if sanitized else 'unknown_company'

# =============================================================================
# BASE SCENARIO
# =============================================================================

class BaseScenario(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –æ–±—â–µ–π –ª–æ–≥–∏–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏, —Ñ–∞–π–ª–∞–º–∏ –∏ –æ—à–∏–±–∫–∞–º–∏."""

    def __init__(self, bot: Bot) -> None:
        self.bot = bot

    @abstractmethod
    async def process(self, *args, **kwargs) -> Any:
        pass

    @abstractmethod
    def register(self, dp: Dispatcher) -> None:
        pass

    async def process_investment_analysis(self, message, state, file_content=''):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        user_id = message.chat.id
        user_data = await state.get_data()
        user_query = user_data.get('user_query', '')

        await self.delete_message_by_id(user_id, user_data.get('processing_msg_id'))

        if not user_query and not file_content:
            await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start')
            return

        try:
            progress_msg = await message.answer('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞...')
            
            processor = InvestmentAnalysisProcessor()
            analysis_params = await processor.parse_user_request(user_query)
            company_name = analysis_params.get("name", "unknown_company")
            
            await progress_msg.edit_text(f'üìä –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company_name}...')
            
            analysis_results = await processor.run_analysis(analysis_params, file_content)
            
            await progress_msg.edit_text('üìÑ –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç...')
            docx_file_path = processor.create_docx_report(company_name, analysis_results)
            
            await progress_msg.edit_text('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é executive summary...')
            executive_summary = await processor.generate_executive_summary(docx_file_path)
            
            await state.update_data(
                analysis_params=analysis_params,
                analysis_results=analysis_results,
                docx_file_path=docx_file_path,
                executive_summary=executive_summary,
                company_name=company_name,
                qa_history=[]
            )
            
            await self.send_markdown_response(message, executive_summary)
            await progress_msg.delete()
            
            await message.answer('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=InvestmentActionsKeyboard())
            await UserStates.INVESTMENT_ACTIONS.set()
            
        except Exception as e:
            await self.handle_error(message, e, "investment_analysis")

    async def send_markdown_response(self, message, response):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        escaped_response = self._escape_markdown(response)
        max_length = 4000
        for i in range(0, len(escaped_response), max_length):
            part = escaped_response[i : i + max_length]
            await message.answer(part, parse_mode='MarkdownV2')

    async def delete_message_by_id(self, user_id, message_id):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID."""
        if message_id:
            try:
                await self.bot.delete_message(chat_id=user_id, message_id=message_id)
            except Exception:
                pass

    async def handle_error(self, message, e, model_name):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏."""
        logger.error(f'–û—à–∏–±–∫–∞ {model_name}: {e}', exc_info=True)

        token_limit = self._parse_token_limit_error(str(e))
        if token_limit:
            await message.answer(f'‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏.\n–ú–∞–∫—Å–∏–º—É–º: {token_limit} —Ç–æ–∫–µ–Ω–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        else:
            await message.answer(
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n'
                '–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            )

        await self.bot.send_message(chat_id=config.OWNER_ID, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}:\n{e}')

    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
        try:
            text = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', text)
            result = ''
            i = 0
            while i < len(text):
                if i + 1 < len(text) and text[i : i + 2] == '**':
                    end_pos = text.find('**', i + 2)
                    if end_pos != -1:
                        bold_content = text[i + 2 : end_pos]
                        escaped_content = ''
                        for char in bold_content:
                            if char in '_[]()~`>#+-=|{}.!':
                                escaped_content += f'\\{char}'
                            elif char == '*':
                                escaped_content += '\\*'
                            else:
                                escaped_content += char
                        result += f'*{escaped_content}*'
                        i = end_pos + 2
                        continue
                if text[i] in '_*[]()~`>#+-=|{}.!':
                    result += f'\\{text[i]}'
                else:
                    result += text[i]
                i += 1
            return result
        except Exception:
            return text

    def _parse_token_limit_error(self, error_text: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç –æ—à–∏–±–∫—É –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤."""
        match = re.search(r'Limit (\d+), Requested (\d+)', error_text)
        if match:
            return int(match.group(1))
        return None

# =============================================================================
# INVESTMENT HANDLERS
# =============================================================================

class InvestmentActionsHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è executive summary."""

    async def process(self, callback_query, state, **kwargs) -> None:
        user_id = callback_query.from_user.id
        action = callback_query.data
        user_data = await state.get_data()
        
        logger.info(f"Investment actions handler: user {user_id}, action {action}")
        await callback_query.answer()

        if action == 'investment_regenerate':
            await callback_query.message.delete()
            progress_msg = await callback_query.message.answer('üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞...')
            
            try:
                processor = InvestmentAnalysisProcessor()
                analysis_params = user_data.get('analysis_params')
                company_name = user_data.get('company_name')
                
                analysis_results = await processor.run_analysis(analysis_params)
                docx_file_path = processor.create_docx_report(company_name, analysis_results)
                executive_summary = await processor.generate_executive_summary(docx_file_path)
                
                await state.update_data(
                    analysis_results=analysis_results,
                    docx_file_path=docx_file_path,
                    executive_summary=executive_summary,
                    qa_history=[]
                )
                
                await progress_msg.delete()
                await self.send_markdown_response(callback_query.message, executive_summary)
                await callback_query.message.answer('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=InvestmentActionsKeyboard())
                
            except Exception as e:
                await progress_msg.delete()
                await self.handle_error(callback_query.message, e, "regeneration")
            
        elif action == 'investment_ask_question':
            await callback_query.message.delete()
            await callback_query.message.answer('‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–ø–∞–Ω–∏–∏. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç.')
            await UserStates.INVESTMENT_QA.set()
            
        elif action == 'investment_get_report':
            await callback_query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', reply_markup=InvestmentReportKeyboard())
            await UserStates.INVESTMENT_REPORT_OPTIONS.set()

    def register(self, dp: Dispatcher) -> None:
        dp.register_callback_query_handler(
            self.process,
            lambda c: c.data in ['investment_regenerate', 'investment_ask_question', 'investment_get_report'],
            state=UserStates.INVESTMENT_ACTIONS,
        )

class InvestmentQAHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""

    async def process(self, message, state, **kwargs) -> None:
        user_id = message.from_user.id
        user_data = await state.get_data()
        user_question = message.text
        
        company_name = user_data.get('company_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è_–∫–æ–º–ø–∞–Ω–∏—è')
        qa_history = user_data.get('qa_history', [])

        try:
            model_api = ModelAPI(Models.chatgpt.value())
            messages = [
                {"role": "system", "content": f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ {company_name}. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º."},
                {"role": "user", "content": user_question}
            ]
            
            await self.bot.send_chat_action(chat_id=user_id, action='typing')
            response = await model_api.get_response(messages)
            
            qa_history.append({"question": user_question, "answer": response})
            await state.update_data(qa_history=qa_history)
            
            await self.send_markdown_response(message, response)
            
            await message.answer(
                '–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π?',
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton('‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—è–º', callback_data='back_to_investment_actions')
                )
            )
            
        except Exception as e:
            await self.handle_error(message, e, "investment_qa")

    def register(self, dp: Dispatcher) -> None:
        dp.register_message_handler(self.process, content_types=['text'], state=UserStates.INVESTMENT_QA)

class BackToInvestmentActionsHandler(BaseScenario):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""

    async def process(self, callback_query, state, **kwargs) -> None:
        await callback_query.answer()
        await callback_query.message.edit_text('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=InvestmentActionsKeyboard())
        await UserStates.INVESTMENT_ACTIONS.set()

    def register(self, dp: Dispatcher) -> None:
        dp.register_callback_query_handler(
            self.process,
            lambda c: c.data == 'back_to_investment_actions',
            state='*',
        )

class InvestmentReportHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞."""

    def __init__(self, bot):
        super().__init__(bot)
        self.email_sender = EmailSender()

    async def process(self, callback_query, state, **kwargs) -> None:
        user_id = callback_query.from_user.id
        action = callback_query.data
        user_data = await state.get_data()

        await callback_query.answer()

        if action == 'investment_download':
            await self._download_report(callback_query, state, user_data)
        elif action == 'investment_email':
            await self._send_email_report(callback_query, state, user_data)
        elif action == 'investment_back_to_actions':
            await callback_query.message.edit_text('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=InvestmentActionsKeyboard())
            await UserStates.INVESTMENT_ACTIONS.set()

    async def _download_report(self, callback_query, state, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
        try:
            await callback_query.message.edit_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...')
            
            processor = InvestmentAnalysisProcessor()
            company_name = user_data.get('company_name', 'unknown_company')
            analysis_results = user_data.get('analysis_results')
            qa_history = user_data.get('qa_history', [])
            
            final_report_path = await processor.create_final_report_with_qa(company_name, analysis_results, qa_history)
            
            safe_company_name = processor._sanitize_filename(company_name)
            report_filename = f'investment_analysis_{safe_company_name}_final.docx'
            
            with open(final_report_path, 'rb') as doc_file:
                await callback_query.message.answer_document(
                    document=types.InputFile(doc_file, filename=report_filename),
                    caption=f'–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç c –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º: {company_name}'
                )
            
            os.unlink(final_report_path)
            
            await callback_query.message.answer('–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=FinalActionsKeyboard())
            await UserStates.CHOOSING_FINAL_ACTION.set()
            
        except Exception as e:
            await self.handle_error(callback_query.message, e, "report_generation")

    async def _send_email_report(self, callback_query, state, user_data):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ email –∏–∑ –ë–î."""
        user_id = callback_query.from_user.id
        
        if not self.email_sender.email_user or not self.email_sender.email_password:
            await callback_query.message.edit_text('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞.', reply_markup=InvestmentReportKeyboard())
            return
        
        try:
            await callback_query.message.edit_text('üîç –ü–æ–ª—É—á–∞—é –≤–∞—à email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
            
            user_email = await get_user_email(user_id)
            
            if not user_email:
                await callback_query.message.edit_text('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞.', reply_markup=InvestmentReportKeyboard())
                return
            
            await callback_query.message.edit_text(f'üìß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç –Ω–∞ {user_email}...')
            
            processor = InvestmentAnalysisProcessor()
            company_name = user_data.get('company_name', 'unknown_company')
            analysis_results = user_data.get('analysis_results')
            qa_history = user_data.get('qa_history', [])
            
            final_report_path = await processor.create_final_report_with_qa(company_name, analysis_results, qa_history)
            
            safe_company_name = processor._sanitize_filename(company_name)
            report_filename = f'investment_analysis_{safe_company_name}_final.docx'
            
            success = await self.email_sender.send_report(user_email, company_name, final_report_path, filename=report_filename)
            
            if os.path.exists(final_report_path):
                os.unlink(final_report_path)
            
            if success:
                await callback_query.message.edit_text(f'‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user_email}')
            else:
                await callback_query.message.edit_text(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ {user_email}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç.')
            
            await callback_query.message.answer('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=FinalActionsKeyboard())
            await UserStates.CHOOSING_FINAL_ACTION.set()
            
        except Exception as e:
            await self.handle_error(callback_query.message, e, "email_sending")

    def register(self, dp: Dispatcher) -> None:
        dp.register_callback_query_handler(
            self.process,
            lambda c: c.data in ['investment_download', 'investment_email', 'investment_back_to_actions'],
            state=UserStates.INVESTMENT_REPORT_OPTIONS,
        )

class FinalActionsHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞."""

    async def process(self, callback_query, state, **kwargs) -> None:
        user_id = callback_query.from_user.id
        action = callback_query.data

        await callback_query.answer()

        if action == 'new_company_analysis':
            await callback_query.message.delete()
            await state.finish()
            
            chat_context = ChatContextManager()
            chat_context.end_active_chats(user_id)
            chat_context.cleanup_user_context(user_id)
            
            system_prompts = SystemPrompts()
            system_prompt = system_prompts.get_prompt(SystemPrompt.INVESTMENT)
            chat_context.start_new_chat(user_id, 'investment', system_prompt)
            
            await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.')
            await UserStates.ENTERING_PROMPT.set()
            
        elif action == 'return_to_main_bot':
            await callback_query.message.delete()
            await state.finish()
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É", url="https://t.me/sberallaibot"))
            
            await callback_query.message.answer(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!\n\n'
                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É –°–±–µ—Ä CPNB:',
                reply_markup=keyboard
            )

    def register(self, dp: Dispatcher) -> None:
        dp.register_callback_query_handler(
            self.process,
            lambda c: c.data in ['new_company_analysis', 'return_to_main_bot'],
            state=UserStates.CHOOSING_FINAL_ACTION,
        )

# =============================================================================
# MAIN HANDLERS
# =============================================================================

class StartHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""

    async def process(self, message: types.Message, **kwargs) -> None:
        user_id = message.from_user.id
        user_name = f'{message.from_user.first_name} {message.from_user.last_name}'
        logger.info(f'–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})')

        chat_context = ChatContextManager()
        chat_context.end_active_chats(user_id)
        chat_context.cleanup_user_context(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        try:
            is_authorized = await check_user_authorized(user_id)
            
            if not is_authorized:
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')
                await message.answer(
                    "üîí –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ.",
                    reply_markup=UnauthorizedKeyboard.get_markup()
                )
                return
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer(
                "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=UnauthorizedKeyboard.get_markup()
            )
            return
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        logger.info(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É')

        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∫–∞–∫ investment
        system_prompts = SystemPrompts()
        system_prompt = system_prompts.get_prompt(SystemPrompt.INVESTMENT)
        chat_context.start_new_chat(user_id, 'investment', system_prompt)
        
        await UserStates.ENTERING_PROMPT.set()

    def register(self, dp: Dispatcher) -> None:
        dp.register_message_handler(self.process, commands=['start'], state='*')

class ProcessingEnterPromptHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    async def process(self, message: types.Message, state: FSMContext, **kwargs) -> None:
        user_id = message.from_user.id
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º investment —Ç–µ–º—É
        await state.update_data(chosen_topic='investment', chosen_model='chatgpt', user_query=message.text)

        logger.info(f'–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: —Ç–µ–º–∞=investment')

        file_message = await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (PDF, Word, PPT) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?', reply_markup=FileAttachKeyboard())
        await state.update_data(file_message_id=file_message.message_id)
        await UserStates.ATTACHING_FILE.set()

    def register(self, dp: Dispatcher) -> None:
        dp.register_message_handler(self.process, content_types=['text'], state=UserStates.ENTERING_PROMPT)

class AttachFileHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""

    async def process(self, callback_query: types.CallbackQuery, state: FSMContext, **kwargs) -> None:
        user_id = callback_query.from_user.id
        user_data = await state.get_data()
        await callback_query.answer()
        await self.delete_message_by_id(user_id, user_data.get('file_message_id'))
        
        if callback_query.data == 'attach_file':
            file_prompt = await callback_query.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (PDF, Word, PPT):')
            await state.update_data(file_prompt_id=file_prompt.message_id)
            await UserStates.UPLOADING_FILE.set()
        else:
            # –ë–µ–∑ —Ñ–∞–π–ª–∞
            await self.process_investment_analysis(callback_query.message, state, file_content='')

    def register(self, dp: Dispatcher) -> None:
        dp.register_callback_query_handler(
            self.process,
            lambda c: c.data in ['attach_file', 'no_file'],
            state=[UserStates.ATTACHING_FILE, UserStates.ATTACHING_FILE_CONTINUE],
        )

class UploadFileHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞."""

    async def process(self, message: types.Message, state: FSMContext, **kwargs) -> None:
        user_id = message.from_user.id
        user_data = await state.get_data()
        await self.delete_message_by_id(user_id, user_data.get('file_prompt_id'))
        
        if not message.document:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, Word –∏–ª–∏ PowerPoint.')
            return
            
        try:
            processing_msg = await message.answer('–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...')
            file_content = await FileProcessor.extract_text_from_file(message.document, self.bot)
            await state.update_data(processing_msg_id=processing_msg.message_id)
            await self.process_investment_analysis(message, state, file_content)
        except ValueError as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}')
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É /start')
            await self.bot.send_message(chat_id=config.OWNER_ID, text=str(e))

    def register(self, dp: Dispatcher) -> None:
        dp.register_message_handler(self.process, content_types=['document'], state=[UserStates.UPLOADING_FILE, UserStates.UPLOADING_FILE_CONTINUE])

class ResetStateHandler(BaseScenario):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset."""

    async def process(self, message: types.Message, state: FSMContext, **kwargs) -> None:
        user_id = message.from_user.id
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è')

        await state.finish()
        await message.answer('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.')
        await UserStates.ENTERING_PROMPT.set()

    def register(self, dp: Dispatcher) -> None:
        dp.register_message_handler(self.process, commands=['reset'], state='*')

# =============================================================================
# BOT MANAGER
# =============================================================================

class BotManager:
    scenarios: Dict[str, BaseScenario] = {}

    def __init__(self, bot: Bot, dp: Dispatcher) -> None:
        self.bot = bot
        self.dp = dp

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        main_scenarios = {
            'start': StartHandler,
            'enter_prompt': ProcessingEnterPromptHandler,
            'attach_file': AttachFileHandler,
            'upload_file': UploadFileHandler,
            'reset_state': ResetStateHandler,
        }

        # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        investment_scenarios = {
            'investment_actions': InvestmentActionsHandler,    
            'investment_qa': InvestmentQAHandler, 
            'back_to_investment_actions': BackToInvestmentActionsHandler, 
            'investment_report': InvestmentReportHandler, 
            'final_actions': FinalActionsHandler,
        }

        self._setup_middlewares()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        all_scenarios = [
            ('main', main_scenarios),
            ('investment', investment_scenarios),
        ]

        for scenario_group, scenarios in all_scenarios:
            for scenario_name, scenario_class in scenarios.items():
                full_name = f'{scenario_group}_{scenario_name}'
                logger.info(f'Registering scenario: {full_name}')
                scenario_instance = scenario_class(bot)
                self._register_scenario(full_name, scenario_instance)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.info("Starting registration of all handlers...")
        for scenario_name, scenario in self.scenarios.items():
            logger.info(f'Calling register() for scenario: {scenario_name}')
            try:
                scenario.register(dp)
                logger.info(f'Successfully registered: {scenario_name}')
            except Exception as e:
                logger.error(f'Failed to register {scenario_name}: {e}')

        logger.info(f"Total scenarios registered: {len(self.scenarios)}")

    def _register_scenario(self, name: str, scenario: BaseScenario) -> None:
        self.scenarios[name] = scenario
        logger.info(f'Scenario {name} added to scenarios dict')

    def _setup_middlewares(self) -> None:
        self.dp.middleware.setup(AccessMiddleware())

# =============================================================================
# MAIN
# =============================================================================

if __name__ == '__main__':
    from aiogram import executor
    
    async def on_startup(dp):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            config = Config()
            sql_connection = config.SQL_CONNECTION_STRING_READER
            await init_auth_system(sql_connection)
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

    config = Config()
    bot = Bot(token=config.TOKEN)
    dp = Dispatcher(bot, storage=MemoryStorage())

    BotManager(bot, dp)

    # –ó–∞–ø—É—Å–∫ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)