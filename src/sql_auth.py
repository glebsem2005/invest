import asyncio
import asyncpg
import logging
import urllib.parse
from typing import Optional

logger = logging.getLogger(__name__)

class SQLAuthChecker:
    """–¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –±—ã–ª–æ"""
    
    def __init__(self, connection_string: str):
        self.connection_string = connection_string
        self.pool = None
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        parsed = urllib.parse.urlparse(connection_string)
        if parsed.port != 17143:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç {parsed.port}, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ 17143")
            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—Ç–æ–º
            new_netloc = f"{parsed.username}:{parsed.password}@{parsed.hostname}:17143"
            self.connection_string = urllib.parse.urlunparse((
                parsed.scheme, new_netloc, parsed.path, 
                parsed.params, parsed.query, parsed.fragment
            ))
        
        logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É: {self.connection_string}")
        
    async def init_pool(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å –Ø–í–ù–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏"""
        try:
            logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ PostgreSQL...")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            parsed = urllib.parse.urlparse(self.connection_string)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å —è–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.pool = await asyncpg.create_pool(
                host=parsed.hostname,
                port=parsed.port or 17143,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç
                database=parsed.path.lstrip('/'),
                user=parsed.username,
                password=parsed.password,
                min_size=1,
                max_size=5,
                command_timeout=60,
                server_settings={
                    'application_name': 'startup_bot_reader'
                }
            )
            
            logger.info("‚úÖ –ü—É–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            async with self.pool.acquire() as conn:
                version = await conn.fetchval("SELECT version()")
                logger.info(f"üìÑ PostgreSQL: {version[:60]}...")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞: {e}")
            raise
    
    async def check_user_authorization(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.pool:
            logger.error("‚ùå –ü—É–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º int –≤ str, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ users_id –∏–º–µ–µ—Ç —Ç–∏–ø TEXT
                result = await conn.fetchrow(
                    "SELECT users_id FROM users WHERE users_id = $1",
                    str(user_id)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
                )
                
                if result:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return True
                else:
                    logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def close_pool(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞"""
        if self.pool:
            await self.pool.close()
            logger.info("‚úÖ –ü—É–ª –∑–∞–∫—Ä—ã—Ç")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
auth_checker: Optional[SQLAuthChecker] = None

async def init_auth_system(connection_string: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    global auth_checker
    
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    auth_checker = SQLAuthChecker(connection_string)
    await auth_checker.init_pool()
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞")
    return auth_checker

async def check_user_authorized(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if auth_checker:
        return await auth_checker.check_user_authorization(user_id)
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return False

async def close_auth_system():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    global auth_checker
    if auth_checker:
        await auth_checker.close_pool()
        auth_checker = None